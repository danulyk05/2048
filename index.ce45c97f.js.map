{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar scoreInfo = document.querySelector(\".game-score\");\nvar table = document.querySelector(\".game-field\");\nvar button = document.querySelector(\".button\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageStart = document.querySelector(\".message-start\");\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar field;\nbutton.addEventListener(\"click\", function() {\n    if (button.classList.contains(\"start\")) {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        button.textContent = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n    } else if (button.classList.contains(\"restart__active\")) {\n        button.classList.remove(\"restart__active\");\n        messageLose.classList.add(\"hidden\");\n    } else messageWin.classList.add(\"hidden\");\n    field = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    score = 0;\n    scoreInfo.textContent = score;\n    setRandomTwo();\n    setRandomTwo();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            movedLeft();\n            break;\n        case \"ArrowRight\":\n            movedRight();\n            break;\n        case \"ArrowUp\":\n            movedUp();\n            break;\n        case \"ArrowDown\":\n            movedDown();\n            break;\n    }\n    if (isGameOver(field)) {\n        messageLose.classList.remove(\"hidden\");\n        button.classList.add(\"restart__active\");\n    }\n    if (checkWin()) messageWin.classList.remove(\"hidden\");\n    scoreInfo.textContent = score;\n});\nfunction hasEmptyTitle() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (field[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction setRandomTwo() {\n    if (!hasEmptyTitle()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (field[r][c] === 0) {\n            field[r][c] = 2;\n            renderField();\n            found = true;\n        }\n    }\n}\nfunction filterZero(row) {\n    return row.filter(function(num) {\n        return num;\n    });\n}\nfunction compareArr(prevField, fields) {\n    return JSON.stringify(prevField) !== JSON.stringify(fields);\n}\nfunction moved(row) {\n    var newRow = row;\n    newRow = filterZero(newRow);\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n    }\n    newRow = filterZero(newRow);\n    while(newRow.length < columns)newRow.push(0);\n    return newRow;\n}\nfunction movedLeft() {\n    var prevField = JSON.parse(JSON.stringify(field));\n    for(var r = 0; r < rows; r++){\n        var row = field[r];\n        row = moved(row);\n        field[r] = row;\n    }\n    if (compareArr(prevField, field)) setRandomTwo();\n    renderField();\n}\nfunction movedRight() {\n    var prevField = JSON.parse(JSON.stringify(field));\n    for(var r = 0; r < rows; r++){\n        var row = field[r];\n        row.reverse();\n        row = moved(row);\n        row.reverse();\n        field[r] = row;\n    }\n    if (compareArr(prevField, field)) setRandomTwo();\n    renderField();\n}\nfunction movedUp() {\n    var prevField = JSON.parse(JSON.stringify(field));\n    for(var c = 0; c < columns; c++){\n        var row = [\n            field[0][c],\n            field[1][c],\n            field[2][c],\n            field[3][c]\n        ];\n        row = moved(row);\n        for(var r = 0; r < rows; r++)field[r][c] = row[r];\n    }\n    if (compareArr(prevField, field)) setRandomTwo();\n    renderField();\n}\nfunction movedDown() {\n    var prevField = JSON.parse(JSON.stringify(field));\n    for(var c = 0; c < columns; c++){\n        var row = [\n            field[0][c],\n            field[1][c],\n            field[2][c],\n            field[3][c]\n        ];\n        row.reverse();\n        row = moved(row);\n        row.reverse();\n        for(var r = 0; r < rows; r++)field[r][c] = row[r];\n    }\n    if (compareArr(prevField, field)) setRandomTwo();\n    renderField();\n}\nfunction renderField() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        table.rows[r].cells[c].className = \"\";\n        table.rows[r].cells[c].classList.add(\"field-cell\");\n        table.rows[r].cells[c].classList.add(\"field-cell--\".concat(field[r][c]));\n        table.rows[r].cells[c].textContent = field[r][c] || \"\";\n    }\n}\nfunction checkWin() {\n    for(var i = 0; i < field[0].length; i++)for(var j = 0; j < field.length; j++){\n        if (field[i][j] === 2048) return true;\n    }\n    return false;\n}\nfunction isGameOver(board) {\n    var size = board.length;\n    for(var row = 0; row < size; row++)for(var col = 0; col < size; col++){\n        if (board[row][col] === 0) return false;\n    }\n    for(var row1 = 0; row1 < size; row1++)for(var col1 = 0; col1 < size; col1++){\n        var currentCell = board[row1][col1];\n        var checkUp = row1 > 0 && board[row1 - 1][col1] === currentCell;\n        var checkDown = row1 < size - 1 && board[row1 + 1][col1] === currentCell;\n        var checkLeft = col1 > 0 && board[row1][col1 - 1] === currentCell;\n        var checkRight = col1 < size - 1 && board[row1][col1 + 1] === currentCell;\n        if (checkUp || checkDown || checkLeft || checkRight) return false;\n    }\n    return true;\n}\n\n//# sourceMappingURL=index.ce45c97f.js.map\n","\"use strict\";\n\nconst scoreInfo = document.querySelector(\".game-score\");\nconst table = document.querySelector(\".game-field\");\nconst button = document.querySelector(\".button\");\nconst messageLose = document.querySelector(\".message-lose\");\nconst messageWin = document.querySelector(\".message-win\");\nconst messageStart = document.querySelector(\".message-start\");\n\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet field;\n\nbutton.addEventListener(\"click\", () => {\n  if (button.classList.contains(\"start\")) {\n    button.classList.remove(\"start\");\n    button.classList.add(\"restart\");\n    button.textContent = \"Restart\";\n    messageStart.classList.add(\"hidden\");\n  } else if (button.classList.contains(\"restart__active\")) {\n    button.classList.remove(\"restart__active\");\n    messageLose.classList.add(\"hidden\");\n  } else {\n    messageWin.classList.add(\"hidden\");\n  }\n\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreInfo.textContent = score;\n\n  setRandomTwo();\n  setRandomTwo();\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  switch (e.key) {\n    case \"ArrowLeft\":\n      movedLeft();\n      break;\n\n    case \"ArrowRight\":\n      movedRight();\n      break;\n\n    case \"ArrowUp\":\n      movedUp();\n      break;\n\n    case \"ArrowDown\":\n      movedDown();\n      break;\n  }\n\n  if (isGameOver(field)) {\n    messageLose.classList.remove(\"hidden\");\n    button.classList.add(\"restart__active\");\n  }\n\n  if (checkWin()) {\n    messageWin.classList.remove(\"hidden\");\n  }\n\n  scoreInfo.textContent = score;\n});\n\nfunction hasEmptyTitle() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (field[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandomTwo() {\n  if (!hasEmptyTitle()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (field[r][c] === 0) {\n      field[r][c] = 2;\n      renderField();\n\n      found = true;\n    }\n  }\n}\n\nfunction filterZero(row) {\n  return row.filter((num) => num);\n}\n\nfunction compareArr(prevField, fields) {\n  return JSON.stringify(prevField) !== JSON.stringify(fields);\n}\n\nfunction moved(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction movedLeft() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row = moved(row);\n    field[r] = row;\n  }\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n}\n\nfunction movedRight() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let r = 0; r < rows; r++) {\n    let row = field[r];\n\n    row.reverse();\n\n    row = moved(row);\n\n    row.reverse();\n    field[r] = row;\n  }\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n}\n\nfunction movedUp() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row = moved(row);\n\n    for (let r = 0; r < rows; r++) {\n      field[r][c] = row[r];\n    }\n  }\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n}\n\nfunction movedDown() {\n  const prevField = JSON.parse(JSON.stringify(field));\n\n  for (let c = 0; c < columns; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row.reverse();\n    row = moved(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      field[r][c] = row[r];\n    }\n  }\n\n  if (compareArr(prevField, field)) {\n    setRandomTwo();\n  }\n\n  renderField();\n}\n\nfunction renderField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      table.rows[r].cells[c].className = \"\";\n      table.rows[r].cells[c].classList.add(\"field-cell\");\n      table.rows[r].cells[c].classList.add(`field-cell--${field[r][c]}`);\n      table.rows[r].cells[c].textContent = field[r][c] || \"\";\n    }\n  }\n}\n\nfunction checkWin() {\n  for (let i = 0; i < field[0].length; i++) {\n    for (let j = 0; j < field.length; j++) {\n      if (field[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isGameOver(board) {\n  const size = board.length;\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (board[row][col] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const currentCell = board[row][col];\n      const checkUp = row > 0 && board[row - 1][col] === currentCell;\n      const checkDown = row < size - 1 && board[row + 1][col] === currentCell;\n      const checkLeft = col > 0 && board[row][col - 1] === currentCell;\n      const checkRight = col < size - 1 && board[row][col + 1] === currentCell;\n\n      if (checkUp || checkDown || checkLeft || checkRight) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"],"names":["field","scoreInfo","document","querySelector","table","button","messageLose","messageWin","messageStart","score","setRandomTwo","hasEmptyTitle","r","c","found","Math","floor","random","renderField","filterZero","row","filter","num","compareArr","prevField","fields","JSON","stringify","moved","newRow","i","length","push","rows","cells","className","classList","add","concat","textContent","addEventListener","contains","remove","e","key","movedLeft","parse","movedRight","reverse","movedUp","movedDown","isGameOver","board","size","col","row1","col1","currentCell","checkUp","checkDown","checkLeft","checkRight","checkWin","j"],"version":3,"file":"index.ce45c97f.js.map"}